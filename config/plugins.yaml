---
# PLUGINS
# ==========================================

# Startup
# -------
- repo: Shougo/dein.vim
- repo: w0ng/vim-hybrid
- repo: rafi/vim-blocks
- repo: itchyny/vim-gitbranch
- repo: itchyny/vim-parenmatch
- repo: thinca/vim-localrc
- repo: christoomey/vim-tmux-navigator
- repo: itchyny/vim-cursorword
  hook_add: autocmd MyAutoCmd FileType vimfiler,denite,qf let b:cursorword=0

# Lazy Loading
# ==========================================

# Languages
# ---------
- { repo: othree/html5.vim, on_ft: html }
- { repo: mustache/vim-mustache-handlebars, on_ft: html }
- { repo: pearofducks/ansible-vim, on_ft: ansible }
- { repo: mitsuhiko/vim-jinja, on_ft: [ htmljinja, jinja ]}
- { repo: groenewege/vim-less, on_ft: less }
- { repo: hail2u/vim-css3-syntax, on_ft: css }
- { repo: othree/csscomplete.vim, on_ft: css }

- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_source: |
    let g:vim_markdown_initial_foldlevel = 5
    let g:vim_markdown_new_list_item_indent = 2
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_conceal = 0

- repo: rhysd/vim-gfm-syntax
  on_ft: markdown
  hook_source: |
    let g:gfm_syntax_enable_always = 0
    let g:gfm_syntax_enable_filetypes = ['markdown']

- { repo: pangloss/vim-javascript, on_ft: javascript }
#- { repo: othree/yajs.vim, on_ft: javascript }
#- { repo: gavocanov/vim-js-indent, on_ft: javascript }
- { repo: othree/jspc.vim, on_ft: javascript }
- { repo: MaxMEllon/vim-jsx-pretty, on_ft: javascript }
- { repo: heavenshell/vim-jsdoc, on_ft: javascript }
- { repo: moll/vim-node, on_ft: javascript }
- { repo: elzr/vim-json, on_ft: json }

#- repo: mxw/vim-jsx
#  on_ft: javascript
#  hook_source: let g:jsx_ext_required = 0

- repo: fatih/vim-go
  on_ft: go
  hook_source: |
    let g:go_def_mapping_enabled = 0
    let g:go_loaded_gosnippets = 1
    let g:go_snippet_engine = 'neosnippet'
    let g:go_highlight_extra_types = 1
    let g:go_highlight_operators = 1

- { repo: tbastos/vim-lua, on_ft: lua }
- { repo: mitsuhiko/vim-python-combined, on_ft: python }
- { repo: raimon49/requirements.txt.vim, on_ft: requirements }
- { repo: StanAngeloff/php.vim, on_ft: php }
- { repo: osyo-manga/vim-monster, on_ft: ruby }
- { repo: toyamarinyon/vim-swift, on_ft: swift }
- { repo: vim-jp/syntax-vim-ex, on_ft: vim }

- repo: m2mdas/phpcomplete-extended
  on_ft: php
  on_i: 1
  hook_source: let g:phpcomplete_extended_use_default_mapping = 0

- { repo: chrisbra/csv.vim, on_ft: csv }
- { repo: tmux-plugins/vim-tmux, on_ft: tmux }
- { repo: cespare/vim-toml, on_ft: toml }
- { repo: PotatoesMaster/i3-vim-syntax, on_ft: i3 }
- { repo: ekalinin/Dockerfile.vim, on_ft: Dockerfile }
- { repo: jstrater/mpvim, on_ft: portfile }
- { repo: tpope/vim-git, on_ft: [ gitcommit, gitrebase, gitconfig ]}
- { repo: robbles/logstash.vim, on_ft: logstash }
- { repo: andreshazard/vim-logreview, on_ft: logreview }
- { repo: exu/pgsql.vim, on_ft: pgsql }
- { repo: othree/nginx-contrib-vim, on_ft: nginx }

# ==========================================
# Commands
# --------
- repo: scrooloose/nerdtree
  depends: nerdtree-git-plugin
  on_map: { n: <Plug> }
  hook_post_source: source $VIMPATH/config/plugins/nerdtree.vim

- repo: Xuyuanp/nerdtree-git-plugin
  on_source: nerdtree

- { repo: lambdalisue/vim-gita, on_cmd: Gita }
- { repo: t9md/vim-choosewin, on_map: { n: <Plug> }}
- { repo: Shougo/vinarise.vim, on_cmd: Vinarise }
- { repo: kana/vim-niceblock, on_map: { x: <Plug> }}
- { repo: guns/xterm-color-table.vim, on_cmd: XtermColorTable }
- { repo: thinca/vim-prettyprint, on_cmd: PP, on_func: PP }
- { repo: mbbill/undotree, on_cmd: UndotreeToggle }
- { repo: metakirby5/codi.vim, on_cmd: Codi, if: empty($VIM_MINIMAL) }
- { repo: itchyny/dictionary.vim, on_cmd: Dictionary, if: empty($VIM_MINIMAL) }

- repo: majutsushi/tagbar
  on_cmd: TagbarToggle
  hook_source: |
    let g:tagbar_width = 40
    if executable('jsctags')
      let g:tagbar_type_javascript = { 'ctagsbin': 'jsctags' }
    endif

- repo: tyru/caw.vim
  on_map: { nx: <Plug> }
  hook_source: |
    let g:caw_zeropos_sp = ''
    let g:caw_zeropos_sp_right = ''
    let g:caw_hatpos_sp = ''
    let g:caw_hatpos_skip_blank_line = 1
    let g:caw_dollarpos_sp_right = ''
    let g:caw_dollarpos_skip_blank_line = 1
    let g:caw_box_sp_right = ''

- repo: lambdalisue/vim-gista
  if: empty($VIM_MINIMAL)
  on_cmd: Gista
  hook_add: let g:gista#client#cache_dir = $VARPATH.'/gista/'

- repo: beloglazov/vim-online-thesaurus
  if: empty($VIM_MINIMAL)
  on_cmd: [ OnlineThesaurusCurrentWord, Thesaurus ]
  hook_source: let g:online_thesaurus_map_keys = 0

# ==========================================
# Interface
# ---------
- { repo: haya14busa/vim-asterisk, on_map: { nv: <Plug> }}
- { repo: rhysd/clever-f.vim, on_map: [[ n, f, F, t, T ]]}
- { repo: rhysd/accelerated-jk, on_map: { n: <Plug> }}
- { repo: Shougo/tabpagebuffer.vim, on_if: tabpagenr() > 1 }

- repo: airblade/vim-gitgutter
  on_path: .*
  hook_source: |
    let g:gitgutter_map_keys = 0
    let g:gitgutter_sh = $SHELL

- repo: lambdalisue/vim-findent
  on_cmd: Findent
  hook_add: |
    augroup findent
      autocmd!
      autocmd FileType css,html,javascript,json,jsx,go,sh,php,yaml,vim
        \ Findent! --no-warnings --no-messages
    augroup END

- repo: nathanaelkane/vim-indent-guides
  on_cmd: [ IndentGuidesEnable, IndentGuidesDisable, IndentGuidesToggle ]
  hook_add: |
    let g:indent_guides_enable_on_vim_startup = 0
    let g:indent_guides_default_mapping = 0
    let g:indent_guides_indent_levels = 15
    let g:indent_guides_exclude_filetypes = [ 'help', 'denite', 'vimfiler' ]
    let g:indent_guides_autocmds_enabled = 0
    autocmd MyAutoCmd BufEnter * if ! empty(&l:filetype)
      \   && index(g:indent_guides_exclude_filetypes, &l:filetype) == -1
      \|   if g:indent_guides_autocmds_enabled == 0 && &l:expandtab
      \|     IndentGuidesEnable
      \|   elseif g:indent_guides_autocmds_enabled == 1 && ! &l:expandtab
      \|     IndentGuidesDisable
      \|   endif
      \| endif

- repo: MattesGroeger/vim-bookmarks
  on_path: .*
  hook_source: |
    let g:bookmark_auto_save_file = $VARPATH.'/bookmarks'
#    let g:bookmark_auto_save_dir = $VARPATH.'/bookmarks'
#    if ! isdirectory(g:bookmark_auto_save_dir)
#      call mkdir(g:bookmark_auto_save_dir, 'p')
#    endif

- repo: osyo-manga/vim-anzu
  hook_add: let g:anzu_status_format = '?%i/%l'
#  on_map: { nv: <Plug> }

- repo: rhysd/committia.vim
  on_path: COMMIT_EDITMSG
  hook_source: let g:committia_min_window_width = 70

#- repo: Konfekt/FastFold
#  on_event: BufEnter
#  hook_post_source: FastFoldUpdate

- repo: benekastah/neomake
  if: has('nvim') && empty($VIM_MINIMAL)
  on_cmd: Neomake
  hook_source: source $VIMPATH/config/plugins/neomake.vim
  hook_add: |
    let g:lint_filetypes = [
      \  'ansible', 'python', 'php', 'ruby', 'vim', 'go', 'sh',
      \  'javascript', 'jsx', 'javascript.jsx', 'json', 'css',
      \  'markdown', 'html', 'yaml'
      \ ]
    autocmd MyAutoCmd BufWritePost *
      \ if index(g:lint_filetypes, &filetype) > -1 && empty(&buftype)
      \|   Neomake
      \| elseif &filetype =~ 'html'
      \|   Neomake tidy
      \| endif

- repo: junegunn/goyo.vim
  if: empty($VIM_MINIMAL)
  depends: limelight.vim
  on_cmd: Goyo
  hook_source: source $VIMPATH/config/plugins/goyo.vim

- repo: junegunn/limelight.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Limelight

- repo: junegunn/vim-peekaboo
  if: empty($VIM_MINIMAL)
  on_map: [[ nx, '"' ]]
  hook_post_source: silent! augroup! peekaboo_init

- repo: itchyny/calendar.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Calendar
  hook_source: |
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1

- repo: vimwiki/vimwiki
  if: empty($VIM_MINIMAL)
  on_map: { n: <Plug> }
  on_cmd: Vimwiki
  hook_add: |
    let g:vimwiki_use_calendar = 1
    let g:vimwiki_hl_headers = 1
    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_autowriteall = 0
  hook_source: |
    let g:vimwiki_list = [
    \   { 'diary_header': 'Diary',
    \     'diary_link_fmt': '%Y-%m/%d',
    \     'auto_toc': 1,
    \     'path': '~/docs/wiki/',
    \     'syntax': 'markdown',
    \     'ext': '.md' },
    \   { 'path': '~/docs/blog/',
    \     'syntax': 'markdown',
    \     'ext': '.md' }
    \ ]

# ==========================================
# Completion
# ----------
- repo: Shougo/deoplete.nvim
  depends: context_filetype.vim
  if: has('nvim') && empty($VIM_MINIMAL)
  on_i: 1
  hook_add: let g:deoplete#enable_at_startup = 1
  hook_source: source $VIMPATH/config/plugins/deoplete.vim

- repo: Shougo/neocomplete
  depends: context_filetype.vim
  if: ! has('nvim') && has('lua') && empty($VIM_MINIMAL)
  on_event: InsertEnter
  hook_add: |
    let g:neocomplete#data_directory = $VARPATH.'/complete'
    let g:neocomplete#enable_at_startup = 1
  hook_source: source $VIMPATH/config/plugins/neocomplete.vim

- repo: Shougo/neosnippet.vim
  depends: [ neosnippet-snippets, context_filetype.vim ]
  on_event: InsertCharPre
  on_ft: snippet
  if: empty($VIM_MINIMAL)
  hook_add: let g:neosnippet#data_directory = $VARPATH.'/snippets'
  hook_source: |
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_path: .*
  hook_add: |
    let g:gutentags_cache_dir = $VARPATH.'/tags'
    let g:gutentags_generate_on_missing = 0
    let g:gutentags_generate_on_new = 0
    let g:gutentags_modules = ['ctags']

- repo: mattn/emmet-vim
  on_i: 1
  on_ft: [ css, html, jsx, javascript, javascript.jsx ]
  hook_source: |
    let g:use_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

- repo: Shougo/echodoc.vim
  on_event: CompleteDone
  hook_post_source: call echodoc#enable()

- repo: Raimondi/delimitMate
  on_i: 1
  hook_source: let g:delimitMate_expand_cr = 1

- { repo: Shougo/neosnippet-snippets, if: empty($VIM_MINIMAL) }
- { repo: Shougo/context_filetype.vim, lazy: 1 }
- { repo: Shougo/neco-vim, on_ft: vim }
- { repo: Shougo/neco-syntax, on_source: [ neocomplete.vim, deoplete.nvim ]}

- repo: davidhalter/jedi-vim
  on_ft: python
  if: empty($VIM_MINIMAL)
  hook_add: |
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#smart_auto_mappings = 0
    let g:jedi#show_call_signatures = 1
  hook_source: |
    let g:jedi#use_tag_stack = 0
    let g:jedi#popup_select_first = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#quickfix_window_height = 10
    let g:jedi#max_doc_height = 100

- repo: wellle/tmux-complete.vim
  on_i: 1
  if: empty($VIM_MINIMAL)
  hook_add: let g:tmuxcomplete#trigger = ''

# Only NeoVim
- repo: zchee/deoplete-go
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: go
  on_i: 1

- repo: zchee/deoplete-jedi
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: python
  on_i: 1
  hook_source: autocmd MyAutoCmd FileType python setlocal omnifunc=

- repo: carlitux/deoplete-ternjs
  build: npm install -g tern
  if: executable('npm') && has('nvim') && empty($VIM_MINIMAL)
  on_i: 1
  on_ft: javascript
  hook_source: |
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = '0'

# Only Vim
- repo: ternjs/tern_for_vim
  build: npm install
  if: executable('npm') && ! has('nvim') && empty($VIM_MINIMAL)
  on_i: 1
  on_ft: javascript
  hook_add: let g:tern_show_signature_in_pum = 1
  hook_post_source:
    autocmd MyAutoCmd FileType javascript setlocal omnifunc=tern#Complete

# ==========================================
# Denite
# ------
- repo: Shougo/denite.nvim
  if: has('nvim')
  on_cmd: Denite
  hook_source: source $VIMPATH/config/plugins/denite.vim
  hook_post_source: source $VIMPATH/config/menus.vim

- { repo: chemzqm/unite-location, on_source: denite.nvim }

- repo: rafi/vim-denite-mpc
  if: executable('mpc') && empty($VIM_MINIMAL)
  on_source: denite.nvim
  hook_source: call denite#custom#var('mpc', 'default_view', 'date')

# ==========================================
# Unite
# -----
- repo: Shougo/unite.vim
  on_source: denite.nvim
  hook_post_source: source $VIMPATH/config/plugins/unite.vim
  hook_add: let g:unite_data_directory = $VARPATH.'/unite'

- repo: Shougo/vimproc.vim
  build: make
  on_source: unite.vim

# ==========================================
# Operators
# ---------
- { repo: kana/vim-operator-user, lazy: 1 }

- repo: kana/vim-operator-replace
  depends: vim-operator-user
  on_map: { vnx: <Plug> }

- repo: rhysd/vim-operator-surround
  depends: [ vim-operator-user, vim-textobj-multiblock ]
  on_map: { n: <Plug> }

- repo: haya14busa/vim-operator-flashy
  depends: vim-operator-user
  on_map: { nx: <Plug> }

# ==========================================
# Text objects
# ------------

- { repo: kana/vim-textobj-user, on_func: textobj#user# }
- { repo: bkad/CamelCaseMotion, on_map: { nox: <Plug>CamelCaseMotion }}
- { repo: AndrewRadev/sideways.vim, on_map: { ox: <Plug>Sideways }}

- repo: AndrewRadev/dsf.vim
  on_map: { n: <Plug>Dsf }
  hook_add: let g:dsf_no_mappings = 1

- repo: osyo-manga/vim-textobj-multiblock
  depends: vim-textobj-user
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_multiblock_no_default_key_mappings = 1

- repo: kana/vim-textobj-function
  depends: vim-textobj-user
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_function_no_default_key_mappings = 1

#  vim: set ts=2 sw=2 tw=80 et :
